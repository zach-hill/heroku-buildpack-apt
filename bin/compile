#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -eo pipefail

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# Store which STACK we are running on in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/STACK ]; then
  CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
else
  CACHED_STACK=$STACK
fi

# Ensure we store the STACK in the cache for next time.
mkdir -p "$CACHE_DIR/.apt"
echo "$STACK" > "$CACHE_DIR/.apt/STACK"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"   # place custom sources.list here

APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"

APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

case "$APT_VERSION" in
  0* | 1.0*) APT_FORCE_YES="--force-yes";;
  *)         APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages";;
esac

if [ -f $APT_CACHE_DIR/Aptfile ] && cmp -s $BUILD_DIR/Aptfile $APT_CACHE_DIR/Aptfile && [[ $CACHED_STACK == $STACK ]] ; then
  # Old Aptfile is the same as new and STACK has not changed
  topic "Reusing cache"
else
  # Aptfile changed or does not exist or STACK changed
  topic "Detected Aptfile or Stack changes, flushing cache"
  rm -rf $APT_CACHE_DIR
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources
  cp -f "$BUILD_DIR/Aptfile" "$APT_CACHE_DIR/Aptfile"
  cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here
  # add custom repositories from Aptfile to sources.list
  # like>>    :repo:deb http://cz.archive.ubuntu.com/ubuntu artful main universe
  if grep -q -e "^:repo:" $BUILD_DIR/Aptfile; then
    topic "Adding custom repositories"
    cat $BUILD_DIR/Aptfile | grep -s -e "^:repo:" | sed 's/^:repo:\(.*\)\s*$/\1/g' >> $APT_SOURCES
  fi
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
# Override the use of /etc/apt/sources.list (sourcelist) and /etc/apt/sources.list.d/* (sourceparts).
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

for PACKAGE in $(cat $BUILD_DIR/Aptfile | grep -v -s -e '^#' | grep -v -s -e "^:repo:"); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl --silent --show-error --fail -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    DEBIAN_FRONTEND=noninteractive apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
PROFILE_PATH="${BUILD_DIR}/.profile.d/000_apt.sh"
mkdir -p "${PROFILE_PATH%/*}"

cat <<'EOF' > "${PROFILE_PATH}"
export PATH="${PATH_BUILD}${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH_BUILD}${LD_LIBRARY_PATH}"
export LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib${LIBRARY_PATH:+:$LIBRARY_PATH}"
export INCLUDE_PATH="${BUILD_DIR}/.apt/usr/include:${BUILD_DIR}/.apt/usr/include/x86_64-linux-gnu${INCLUDE_PATH:+:$INCLUDE_PATH}"
export PKG_CONFIG_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
export CPATH="${INCLUDE_PATH}" CPPPATH="${INCLUDE_PATH}"
EOF

# cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
# export PATH="\$HOME/.apt/usr/bin:\$PATH"
# export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
# export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
# export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
# export CPATH="\$INCLUDE_PATH"
# export CPPPATH="\$INCLUDE_PATH"
# export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
# EOF

# export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
# export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
# export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
# export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
# export CPATH="$INCLUDE_PATH"
# export CPPPATH="$INCLUDE_PATH"
# export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

# Regex patterns (colon-delimited) to check for LD_LIBRARY_PATH
# "/app" will be substituted with $BUILD_DIR during build and $HOME on deploy
LD_LIBRARY_REGEX_PATTERNS="${LD_LIBRARY_REGEX_PATTERNS:+$LD_LIBRARY_REGEX_PATTERNS:}"'/app/\.apt/(usr/)?lib(/(x86_64|i386)-linux-gnu)?(/[^/]*)?'

# Find directories under $BUILD_DIR/.apt matching given regex patterns
# Concatenate non-interpolated paths into LD_LIBRARY_PATH_BUILD
LD_LIBRARY_PATH_BUILD="${LD_LIBRARY_PATH_BUILD:+$LD_LIBRARY_PATH_BUILD:}"
for FIND_PATH_PATTERN in $(echo -e ${LD_LIBRARY_REGEX_PATTERNS//':'/"\n"}); do
  FIND_PATH_PATTERN=${FIND_PATH_PATTERN/#'/app'/"${BUILD_DIR}"}
  LD_LIBRARY_PATH_BUILD+=$(find "${BUILD_DIR}/.apt" -type d -regextype 'posix-extended' -regex "${FIND_PATH_PATTERN}" -printf "\${BUILD_DIR}/.apt/%P:")
done

# Include "bin|sbin" paths into $PATH
PATH_BUILD=$(find "${BUILD_DIR}/.apt" -maxdepth 2 -type d \( -name "bin" -o -name "sbin" \) -printf "\${BUILD_DIR}/.apt/%P:")

# Insert our complete "BUILD" variables into the profile script
for build_var in PATH_BUILD LD_LIBRARY_PATH_BUILD; do
  sed -i "1i${build_var}=\"${!build_var}\"" "${PROFILE_PATH}"
done

# Execute profile script so we have the updated variables
source "${PROFILE_PATH}"

# Replace '${BUILD_DIR}' with '${HOME}' in profile script (again, NOT interpolated)
# This will be executed (and variables interpolated) on deploy
sed -iu 's/${BUILD_DIR}/${HOME}/g' "${PROFILE_PATH}"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

topic "Rewrite package-config files"
find $BUILD_DIR/.apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'
